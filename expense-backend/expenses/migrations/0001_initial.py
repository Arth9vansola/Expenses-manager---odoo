# Generated by Django 5.2.7 on 2025-10-04 08:27

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('country', models.CharField(max_length=100)),
                ('default_currency', models.CharField(default='USD', max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Companies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('manager', 'Manager'), ('employee', 'Employee')], default='employee', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('manager', models.ForeignKey(blank=True, limit_choices_to={'role__in': ['admin', 'manager']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='direct_reports', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='expenses.company')),
            ],
            options={
                'ordering': ['name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApprovalRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('approvers', models.JSONField(default=list, help_text='Ordered list of user IDs/roles for approval')),
                ('min_percentage_required', models.IntegerField(default=100, help_text='Minimum percentage of approvers required', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('is_hybrid_rule', models.BooleanField(default=False, help_text='Combines multiple approval methods')),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('categories', models.JSONField(blank=True, default=list, help_text='Applicable expense categories')),
                ('departments', models.JSONField(blank=True, default=list, help_text='Applicable departments')),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0, help_text='Higher numbers = higher priority')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_rules', to=settings.AUTH_USER_MODEL)),
                ('specific_approver', models.ForeignKey(blank=True, help_text='Specific user required for approval', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specific_approval_rules', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approval_rules', to='expenses.company')),
            ],
            options={
                'ordering': ['-priority', 'name'],
                'unique_together': {('company', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('description', models.TextField()),
                ('date', models.DateField()),
                ('receipt_url', models.URLField(blank=True, null=True)),
                ('receipt_file', models.FileField(blank=True, null=True, upload_to='receipts/')),
                ('category', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('paid', 'Paid')], default='draft', max_length=20)),
                ('approval_chain', models.JSONField(default=list, help_text='Ordered list of user IDs for approval')),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes')),
                ('reference_number', models.CharField(blank=True, max_length=100, unique=True)),
                ('approval_rule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expenses', to='expenses.approvalrule')),
                ('current_approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pending_approvals', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Approval',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('comment', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('approval_order', models.IntegerField(default=0, help_text='Order in approval chain')),
                ('is_final_approval', models.BooleanField(default=False)),
                ('approver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_approvals', to=settings.AUTH_USER_MODEL)),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='expenses.expense')),
            ],
            options={
                'ordering': ['approval_order', 'timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['owner', 'status'], name='expenses_ex_owner_i_936b42_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['current_approver', 'status'], name='expenses_ex_current_48e80e_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['date'], name='expenses_ex_date_17a2b2_idx'),
        ),
        migrations.AddIndex(
            model_name='approval',
            index=models.Index(fields=['expense', 'status'], name='expenses_ap_expense_1db4d6_idx'),
        ),
        migrations.AddIndex(
            model_name='approval',
            index=models.Index(fields=['approver', 'status'], name='expenses_ap_approve_85f3df_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='approval',
            unique_together={('expense', 'approver')},
        ),
    ]
